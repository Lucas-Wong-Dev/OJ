// 最小公倍数：两个整数公有的倍数成为他们的公倍数，其中一个最小的公倍数是他们的最小公倍数，同样地，若干个整数公有的倍数中最小的正整数称为它们的最小公倍数
// 最小公倍数=两整数的乘积÷最大公约数

// 最大公约数：注意约数又称因数。

// 求最大公约数的几种算法
// 辗转相除法
// 有两整数a和b：
// ① a%b 得余数c
// ② 若c=0，则b即为两数的最大公约数
// ③ 若c!=0，则令a=b，b=c，(即：令被除数等于除数，除数等于余数)再回去执行① ，直到b==0，这时a即为最大公约数（因为在退出循环前，已经令被除数等于除数，除数等于余数，所以要判断余数是否为0，就要判断b是否为0）
// 例如求27和15的最大公约数过程为：
// 27÷15 余 12
// 15÷12 余 3
// 12÷3  余 0
// 因此，3 即为最大公约数

// 递归法
// 本质上是辗转相除法，只是实现形式上是递归，而不是循环
#include <stdio.h>

int gcd(int p, int q)
{
    return q == 0 ? p : gcd(q, p % q);
}
int main()
{
    int a, b;
    scanf("%d%d", &a, &b);
    int t = gcd(a, b);
    printf("%d\t", t);
    printf("%d", a * b / t);
    return 0;
}

// 相减法
// 有两整数a和b：
// ① 若a>b，则a=a-b
// ② 若a<b，则b=b-a
// ③ 若a==b，则a（或b）即为两数的最大公约数；若a!=b，则再回去执行①
// 例如求 27 和 15 的最大公约数过程为：
// 27－15＝12  ( 15>12 )
// 15－12＝3   ( 12>3 )
// 12－3＝9    ( 9>3 )
// 9－3＝6     ( 6>3 )
// 6－3＝3     ( 3==3 )
// 因此，3 即为最大公约数

// 穷举法
// 有两整数a 和b：
// ① i=1
// ② 若a，b均能被i整除，则t＝i
// ③ i++
// ④ 若i<= a(或b)，则再回去执行②；若i>a(或b)，则t即为最大公约数，

// 改进：
// ① i=a(或b)
// ② 若a，b能同时被i 整除，则i即为最大公约数，结束
// ③ i--，再回去执行②

// #include <stdio.h>
// int main()
// {

//     int m, n, a, b, t;
//     scanf("%d%d", &a, &b);
//     m = a;
//     n = b;

//     // for (int i = 1; i <= a; i++)
//     // {
//     //     if (a % i == 0 && b % i == 0)
//     //     {
//     //         t = i;
//     //     }
//     // }

//     // 改进后的
//     for (t = a; t > 0; t--)
//         if (a % t == 0 && b % t == 0)
//             break;

//     printf("The largest common divisor:%d\n", t);
//     printf("The least common multiple:%d\n", m * n / t);
//     return 0;
// }